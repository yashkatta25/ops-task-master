# Define 'Service' to expose backend application deployment
apiVersion: v1
kind: Service
metadata:
  name: ops-demo-app
  namespace: ops-demo
spec:
  selector:  # backend application pod lables should match these
    app: ops-demo
    tier: backend
  ports:
  - protocol: "TCP"
    port: 3000
    targetPort: 3000
  type: LoadBalancer   # use NodePort, if you are not running Kubernetes on cloud
---
# Configure 'Deployment' of backend application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ops-demo-app
  namespace: ops-demo
  labels:
    app: ops-demo
    tier: backend
spec:
  replicas: 2    # Number of replicas of back-end application to be deployed
  selector:
    matchLabels: # backend application pod labels should match these
      app: ops-demo
      tier: backend
  template:
    metadata:
      namespace: ops-demo
      labels: # Must macth 'Service' and 'Deployment' labels
        app: ops-demo
        tier: backend
    spec:
      containers:
      - name: ops-demo-app
        image: onlinedockerimage/ops-demo:latest   # docker image of backend application
        env:   # Setting Enviornmental Variables
          - name: DEMO_REDIS_HOST   # Setting Database host address from configMap
            valueFrom:
              configMapKeyRef:
                name: db-conf
                key: host
          - name: DEMO_REDIS_ADDR
            value: "$(DEMO_REDIS_HOST):6379"
          - name: DEMO_APP_ADDR
            value: "0.0.0.0:3000"
          - name: RESTART
            value: "1"
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          limits:
            memory: "200Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 3
          periodSeconds: 3
